{
  "version": 3,
  "file": "db.js",
  "sourceRoot": "",
  "sources": [
    "db.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,KAAA,EAAA,EAAA,EAAA,KAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAAA;;EAAA,KAAA,GAAQ,OAAA,CAAQ,SAAR,EAAR;;EACA,CAAA,CAAC,SAAD,EAAW,UAAX,EAAsB,SAAtB,CAAA,GAAmC,OAAA,CAAQ,SAAR,CAAnC;;EACA,EAAA,GAAK,OAAA,CAAQ,UAAR,EAFL;;;EAMA,QAAA,GAAW;;EAEX,OAAA,GAAU,QAAA,CAAC,EAAD,CAAA;WACR,IAAI,OAAJ,CAAY,QAAA,CAAC,OAAD,EAAS,MAAT,CAAA;AACV,UAAA;AAAA;eACE,OAAA,CAAQ,EAAA,CAAA,CAAR,EADF;OAAA,aAAA;QAEM;eACJ,MAAA,CAAO,CAAP,EAHF;;IADU,CAAZ;EADQ,EARV;;;EAgBA,KAAA,GACE;IAAA,UAAA,EACE;MAAA,OAAA,EAAU,CAAV;MACA,OAAA,EAAU,EADV;MAEA,UAAA,EAAa,EAFb;MAGA,MAAA,EAAS,EAHT;MAIA,aAAA,EAAgB,EAJhB;MAKA,KAAA,EAAQ,EALR;MAMA,WAAA,EAAc,EANd;MAOA,WAAA,EAAc,EAPd;MAQA,OAAA,EAAU;IARV,CADF;IAWA,QAAA,EACE;MAAA,KAAA,EAAQ,CAAR;MACA,QAAA,EAAW,CADX;MAEA,OAAA,EAAU,CAFV;MAGA,MAAA,EAAS,CAHT;MAIA,MAAA,EAAS,CAJT;MAKA,QAAA,EAAW,CALX;MAMA,IAAA,EAAO,CANP;MAOA,IAAA,EAAO,CAPP;MAQA,SAAA,EAAY,CARZ;MASA,KAAA,EAAQ,EATR;MAUA,OAAA,EAAU,EAVV;MAWA,OAAA,EAAU,EAXV;MAYA,QAAA,EAAW,EAZX;MAaA,OAAA,EAAU,EAbV;MAcA,OAAA,EAAU,EAdV;MAeA,eAAA,EAAkB,EAflB;MAgBA,KAAA,EAAQ,GAhBR;IAAA;EAZF;;EA+BI,KAAN,MAAA,GAAA;IACE,WAAc,MAAA,MAAA,UAAA,QAA4B,MAA5B,CAAA,EAAA;;UA8Bd,CAAA,0BAAA,CAAA;UAUA,CAAA,qBAAA,CAAA,0BAvCE;;UAmDF,CAAA,gBAAA,CAAA,qBAnDE;;;UA2DF,CAAA,gBAAA,CAAA;UAOA,CAAA,0BAAA,CAAA;UAOA,CAAA,qBAAA,CAAA;MA1Ee,IAAC,CAAA;MAAK,IAAC,CAAA;MAAK,IAAC,CAAA;MAAS,IAAC,CAAA;MACpC,IAAC,CAAA,WAAD,GAAe,CAAA,WAAA,CAAA,CAAc,IAAC,CAAA,IAAf,CAAoB,CAApB;MACf,UAAA,CAAW,IAAC,CAAA,WAAZ;MACA,IAAC,CAAA,UAAD,GAAc;MACd,IAA4D,qBAA5D;QAAA,IAAC,CAAA,UAAD,GAAc,CAAA,4BAAA,CAAA,CAA+B,IAAC,CAAA,QAAhC,CAAA,EAAd;;MACA,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA,IAAD,GAAQ,IAAC,CAAA;MACjB,IAAC,CAAA,QAAD,GAAY;MACZ,IAAC,CAAA,UAAD,GAAc,CAAA,YAAA,CAAA,CAAe,IAAC,CAAA,IAAhB,CAAA;MACd,IAAC,CAAA,SAAD,GAAa;MAEb,IAAC,CAAA,WAAD,GAAe,IAAI,SAAJ,CAAc,IAAC,CAAA,WAAf,EAA4B,kBAA5B,EAAiD,IAAC,CAAA,cAAlD,EAAmE,IAAC,CAAA,mBAApE;MACf,IAAC,CAAA,WAAD,GAAe,IAAI,SAAJ,CAAc,IAAC,CAAA,WAAf,EAA4B,QAA5B,EAAuC,IAAC,CAAA,cAAxC,EAAyD,IAAC,CAAA,mBAA1D;MACf,IAAC,CAAA,MAAD,GAAQ,CAAA;IAZI;;IAed,OAAU,CAAA,CAAA;AACR,UAAA;MAAA,SAAA,GAAY,CAAA,CAAA,CAAG,IAAC,CAAA,QAAJ,EAAA,CAAA,CAAgB,IAAC,CAAA,UAAjB,EAAA,CAAA,CAA+B,IAAC,CAAA,UAAhC,CAAA;MACZ,IAAC,CAAA,GAAD,GAAO,KAAK,CAAC,IAAN,CAAW,SAAX;aACP,IAAC,CAAA,SAAD,GAAW;IAHH;;IAKV,KAAQ,CAAC,GAAD,CAAA;AACN,UAAA;MAAA,IAAc,CAAI,IAAC,CAAA,SAAnB;QAAA,IAAC,CAAA,OAAD,CAAA,EAAA;;MACA,IAAA,GAAO,IAAC,CAAA,GAAG,CAAC,KAAL,CAAW,GAAX;aACP;IAHM;;IAKR,QAAW,CAAC,IAAD,CAAA;AACT,UAAA;MAAA,IAAiE,yBAAjE;QAAA,OAAO,CAAC,GAAR,CAAY,CAAA,OAAA,CAAA,CAAU,IAAV,CAAe,6BAAf,CAAZ,EAAA;;aACA,KAAA,GAAQ,IAAC,CAAA,MAAO,CAAA,IAAA;IAFP;;IAKX,mBAAsB,WAAA,CAAA,EAAA;AAIpB,UAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;MAJqB,IAAC,CAAA,uBAItB;;;;MAAA,IAAC,CAAA,MAAD,GAAU,CAAA;AACV;AAAA;MAAA,KAAA,qCAAA;;QACE,KAAA,GAAQ,IAAI,KAAJ,CAAU,IAAV,EAAY,SAAZ;qBACR,IAAC,CAAA,MAAO,CAAA,SAAA,CAAR,GAAmB;MAFrB,CAAA;;IALoB;;IAUtB,cAAiB,CAAC,EAAD,CAAA;MACf,IAAc,CAAI,IAAC,CAAA,SAAnB;QAAA,IAAC,CAAA,OAAD,CAAA,EAAA;;aACA,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,EAAZ,CACE,CAAC,IADH,CACQ,OAAA,CAAA,GAAA,EAAA;QAAC,IAAC,CAAA;QACN,IAAC,CAAA,SAAD,GAAa,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,QAAA,CAAC,MAAD,CAAA;iBAAY,MAAO,CAAA,YAAA;QAAnB,CAAZ,EAAb;;;eAGA,EAAA,CAAG,IAAC,CAAA,SAAJ,EAJI;MAAA,CADR,CAME,CAAC,KANH,CAMS,QAAA,CAAC,CAAD,CAAA;eACL,OAAO,CAAC,GAAR,CAAY,CAAA,uBAAA,CAAA,CAA0B,CAA1B,EAAA,CAAZ;MADK,CANT;IAFe;;IAYjB,SAAY,CAAC,EAAD,CAAA,EAAA;;MAEV,IAAG,IAAC,CAAA,MAAJ;eACE,EAAA,CAAG,IAAC,CAAA,MAAJ,EADF;OAAA,MAAA;eAGE,IAAC,CAAA,WAAW,CAAC,OAAb,CAAqB,EAArB,EAHF;;IAFU;;IAQZ,SAAY,CAAA,CAAA,EAAA;;MAEV,IAAG,IAAC,CAAA,MAAJ;AACE,eAAO,OAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,MAAjB,EADT;OAAA,MAAA;eAGE,IAAC,CAAA,WAAW,CAAC,OAAb,CAAA,EAHF;;IAFU;;IAOZ,mBAAsB,CAAC,MAAD,CAAA,EAAA;AAClB,UAAA,CAAA,EAAA,OAAA,EAAA;MAAA,OAAO,CAAC,GAAR,CAAY,0CAAZ,EAAA;;;;AAGA;MAAA,KAAA,WAAA;;qBACE,KAAK,CAAC,QAAN,CAAe,IAAf,EAAiB,CAAjB;MADF,CAAA;;IAJkB;;IAOtB,cAAiB,CAAC,EAAD,CAAA;MACf,IAAc,CAAI,IAAC,CAAA,SAAnB;QAAA,IAAC,CAAA,OAAD,CAAA,EAAA;;aACA,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CACE,CAAC,IADH,CACQ,OAAA,CAAA,GAAA,EAAA;AACJ,YAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,SAAA,EAAA;QADK,IAAC,CAAA;QACN,SAAA,GAAY,IAAC,CAAA,MAAM,CAAC,GAAR,CAAY,QAAA,CAAC,GAAD,CAAA;iBACtB,GAAI,CAAA,YAAA;QADkB,CAAZ;QAEZ,IAAC,CAAA,SAAD,GAAa,CAAC,GAAG,IAAI,GAAJ,CAAQ,SAAR,CAAJ,EAFb;AAIA;;QAAA,KAAA,qCAAA;;UACE,SAAA,GAAY,GAAI,CAAA,YAAA;UAEhB,IAAkB,mBAAlB;;YAAA,IAAC,CAAA,MAAD,GAAQ,CAAA,EAAR;;UACA,IAAmC,8BAAnC;YAAA,KAAA,GAAQ,IAAC,CAAA,QAAD,CAAU,SAAV,EAAR;;UACA,KAAA,GAAQ,IAAC,CAAA,MAAO,CAAA,SAAA;UAChB,KAAK,CAAC,QAAN,CAAe,GAAf;QANF;eAOA,EAAA,CAAG,IAAC,CAAA,MAAJ,EAZI;MAAA,CADR,CAcE,CAAC,KAdH,CAcS,QAAA,CAAC,CAAD,CAAA;eACL,OAAO,CAAC,GAAR,CAAY,CAAA,uBAAA,CAAA,CAA0B,CAA1B,EAAA,CAAZ;MADK,CAdT;IAFe,CA1EjB;;;IA8FA,UAAa,CAAC,EAAD,CAAA;MACX,IAAc,CAAI,IAAC,CAAA,SAAnB;QAAA,IAAC,CAAA,OAAD,CAAA,EAAA;;aACA,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,EAAgB,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,CAAhB,CACE,CAAC,IADH,CACQ,OAAA,CAAA,GAAA,EAAA;AACJ,YAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;QADK,IAAC,CAAA;AACN;AAAA;QAAA,KAAA,qCAAA;;UACE,SAAA,GAAY,QAAS,CAAA,YAAA;UAErB,IAAuC,8BAAvC;;YAAA,KAAA,GAAQ,IAAC,CAAA,QAAD,CAAU,IAAV,EAAc,SAAd,EAAR;;UACA,KAAA,GAAQ,IAAC,CAAA,MAAO,CAAA,SAAA;uBAChB,KAAK,CAAC,QAAN,CAAe,QAAf;QALF,CAAA;;MADI,CADR,CASE,CAAC,IATH,CASQ,QAAA,CAAA,CAAA;eACJ,EAAA,CAAA;MADI,CATR,CAWE,CAAC,KAXH,CAWS,QAAA,CAAC,CAAD,CAAA;eACL,OAAO,CAAC,GAAR,CAAY,CAAA,kBAAA,CAAA,CAAqB,CAArB,EAAA,CAAZ;MADK,CAXT;IAFW;;IAgBb,QAAW,CAAC,IAAD,CAAA;AACT,UAAA;MAAA,KAAA,GAAQ,IAAI,KAAJ,CAAU,IAAV,EAAY,IAAZ,EAAR;;aAEA;IAHS;;EA/Gb;;EAoHM;IAAN,MAAA,MAAA;MAIE,WAAc,IAAA,OAAA,CAAA;AACZ,YAAA;YAqDF,CAAA,aAAA,CAAA;QAtDe,IAAC,CAAA;QAAG,IAAC,CAAA;QAClB,IAAoB,CAAI,IAAC,CAAA,EAAzB;UAAA,IAAC,CAAA,EAAD,GAAM,EAAE,SAAR;;QACA,IAAoB,CAAI,IAAC,CAAA,UAAzB;UAAA,IAAC,CAAA,UAAD,GAAc,GAAd;;QACA,IAAC,CAAA,MAAD,GAAQ,CAAA;QACR,IAAC,CAAA,EAAE,CAAC,MAAO,CAAA,IAAC,CAAA,IAAD,CAAX,GAAkB;QAClB,IAAC,CAAA,KAAD,GAAS;QACT,IAAC,CAAA,WAAD,GAAe,IAAC,CAAA,EAAE,CAAC,WAAJ,GAAkB,CAAA,CAAA,CAAG,IAAC,CAAA,IAAJ,CAAS,CAAT;QACjC,UAAA,CAAW,IAAC,CAAA,WAAZ;QACA,MAAA,GAAO,GAPP;QAQA,EAAE,CAAC,MAAH,CAAU,IAAC,CAAA,WAAD,GAAe,KAAK,CAAC,gBAA/B,EAAkD,CAAC,MAAD,CAAA,GAAA;UAChD,IAAG,MAAH;mBACE,IAAC,CAAA,iBAAD,CAAA,EADF;;QADgD,CAAlD;MATY,CAFd;;;;;;;;;;;;;;MA2BA,IAAO,CAAA,CAAA;AAEL,YAAA,KAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA;;QAAA,MAAA,GAAS,MAAM,CAAC,MAAP,CAAc,IAAC,CAAA,MAAf;QACT,MAAM,CAAC,IAAP,CAAY,QAAA,CAAC,CAAD,EAAG,CAAH,CAAA;iBACV,CAAC,CAAC,GAAF,GAAQ,CAAC,CAAC;QADA,CAAZ,EADA;;QAIA,IAAC,CAAA,MAAD,GAAU,CAAA,EAJV;QAKA,KAAA,wCAAA;;UACE,IAAC,CAAA,MAAO,CAAA,KAAK,CAAC,IAAN,CAAR,GAAoB;QADtB;eAEA,IAAC,CAAA,eAAD,CAAA;MATK,CA3BP;;;MAyCY,OAAX,QAAW,CAAC,EAAD,EAAM,SAAN,CAAA;AACV,YAAA,SAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA;QAAA,OAAO,CAAC,GAAR,CAAY,sFAAZ;QACA,KAAA,GAAQ,EAAE,CAAC,QAAH,CAAY,SAAS,CAAC,IAAtB;AAER;;;AAAA;QAAA,KAAA,QAAA;;uBACE,KAAK,CAAC,QAAN,CAAe,KAAf,EAAqB,SAArB;QADF,CAAA;;MAJU,CAzCZ;;;MAiDA,SAAY,CAAC,IAAD,CAAA;QACV,IAAiB,eAAjB;UAAA,IAAC,CAAA,EAAD,GAAM,IAAI,CAAC,GAAX;;QACA,IAAC,CAAA,IAAD,GAAQ,IAAI,CAAC;QACb,IAAiC,uBAAjC;UAAA,IAAC,CAAA,UAAD,GAAc,IAAI,CAAC,WAAnB;;QACA,IAAC,CAAA,KAAD,GAAS,IAAI,CAAC;eACd,IAAC,CAAA,MAAD,GAAU,IAAI,CAAC;MALL;;MAOZ,MAAS,CAAC,GAAD,CAAA,EAAA;QACP,IAAG,WAAH;iBACE;YAAA,EAAA,EAAK,IAAC,CAAA,EAAN;YACA,IAAA,EAAO,IAAC,CAAA,IADR;YAEA,UAAA,EAAa,IAAC,CAAA,UAFd;YAGA,KAAA,EAAQ,IAAC,CAAA,KAHT;YAIA,MAAA,EAAS,IAAC,CAAA;UAJV,EADF;SAAA,MAAA;iBAOE,KAPF;;MADO;;MAWT,IAAO,CAAA,CAAA;eACL,OAAO,CAAC,GAAR,CAAY,CAAA,iBAAA,CAAA,CAAoB,IAAC,CAAA,IAArB,CAAA,CAAZ;MADK,CAnEP;;;MAuEA,aAAgB,CAAA,CAAA;eACd,IAAC,CAAA,EAAE,CAAC,KAAJ,CAAU,CAAA,8BAAA,CAAA,CAAiC,IAAC,CAAA,IAAlC,EAAA,CAAV,CACE,CAAC,IADH,CACQ,CAAC,IAAD,CAAA,GAAA,EAAA;;UAEJ,IAAC,CAAA,KAAD,GAAS,IAAK,CAAA,CAAA,CAAE,CAAC,SAAjB;iBACA,OAAO,CAAC,GAAR,CAAY,CAAA,aAAA,CAAA,CAAgB,IAAC,CAAA,IAAjB,CAAsB,GAAtB,CAAA,CAA2B,IAAC,CAAA,KAA5B,CAAA,CAAZ;QAHI,CADR,CAKE,CAAC,KALH,CAKS,CAAC,GAAD,CAAA,GAAA;iBACL,OAAO,CAAC,GAAR,CAAY,kBAAZ,EAA+B,GAA/B;QADK,CALT;MADc,CAvEhB;;;MAiFA,YAAe,CAAA,CAAA;eACb,IAAC,CAAA,EAAE,CAAC,KAAJ,CAAU,CAAA,cAAA,CAAA,CAAiB,IAAC,CAAA,IAAlB,EAAA,CAAV,CACE,CAAC,IADH,CACQ,MAAA,CAAA,GAAA;UAAC,IAAC,CAAA,aAAF;;;;QAAA,CADR,CAKE,CAAC,IALH,CAKQ,CAAA,CAAA,GAAA,EAAA;UACJ,IAAC,CAAA,KAAD,GAAS,IAAC,CAAA,IAAI,CAAC;iBACf,IAAC,CAAA,eAAD,CAAA;QAFI,CALR,CAQE,CAAC,IARH,CAQQ,CAAA,CAAA,GAAA,EAAA;iBACJ,IAAC,CAAA,WAAD,CAAA;QADI,CARR;MADa;;MAYf,cAAiB,CAAA,CAAA;eACf,IAAC,CAAA,EAAE,CAAC,GAAG,CAAC,MAAR,CAAe,CAAf,EAAmB,CAAC,IAAD,EAAM,IAAN,EAAW,IAAC,CAAA,IAAZ,CAAnB,CACE,CAAC,IADH,CACQ,OAAA,CAAA,GAAA,EAAA;AACJ,cAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;UADK,IAAC,CAAA;AACN;AAAA;UAAA,KAAA,qCAAA;;yBACE,IAAC,CAAA,QAAD,CAAU,MAAV;UADF,CAAA;;QADI,CADR,CAIE,CAAC,KAJH,CAIS,QAAA,CAAC,CAAD,CAAA;iBACL,OAAO,CAAC,GAAR,CAAY,CAAA,kBAAA,CAAA,CAAqB,CAArB,CAAA,CAAZ;QADK,CAJT;MADe;;MAQjB,aAAgB,CAAC,GAAD,CAAA;AACd,YAAA;QAAA,KAAA,GAAQ,KAAK,CAAC,SAAN,CAAgB,IAAhB,EAAkB,GAAlB,EAAR;;eAEA;MAHc;;MAKhB,iBAAoB,CAAA,CAAA;AAClB,YAAA;QAAA,QAAA,GAAW,IAAC,CAAA,WAAD,GAAe,KAAK,CAAC;eAChC,EAAE,CAAC,MAAH,CAAU,QAAV,CACE,CAAC,IADH,CACQ,CAAC,MAAD,CAAA,GAAA;iBACJ,EAAE,CAAC,QAAH,CAAY,QAAZ,CACE,CAAC,IADH,CACQ,CAAC,IAAD,CAAA,GAAA;AACJ,gBAAA;YAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;mBACP,IAAC,CAAA,SAAD,CAAW,IAAX;UAFI,CADR;QADI,CADR;MAFkB;;MASpB,aAAgB,CAAA,CAAA;AACd,YAAA;QAAA,QAAA,GAAW,IAAC,CAAA,WAAD,GAAe,KAAK,CAAC;eAChC,EAAE,CAAC,MAAH,CAAU,QAAV,CACE,CAAC,IADH,CACQ,CAAC,MAAD,CAAA,GAAA;iBACJ,EAAE,CAAC,QAAH,CAAY,QAAZ,CACE,CAAC,IADH,CACQ,CAAC,IAAD,CAAA,GAAA;mBACJ,IAAC,CAAA,IAAD,GAAQ,IAAI,CAAC,KAAL,CAAW,IAAX;UADJ,CADR;QADI,CADR;MAFc,CAnHhB;;;MA4HA,WAAe,CAAA,CAAA;AACb,YAAA;QAAA,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,IAAC,CAAA,IAAhB,EAAqB,IAArB,EAA0B,CAA1B;eACP,SAAA,CAAU,IAAC,CAAA,WAAX,EAAyB,KAAK,CAAC,YAA/B,EAA6C,IAA7C;MAFa,CA5Hf;;;MAiIA,eAAkB,CAAA,CAAA;AAChB,YAAA;QAAA,IAAA,GAAO,IAAI,CAAC,SAAL,CAAe,IAAf,EAAiB,IAAjB,EAAsB,CAAtB;eACP,OAAA,CAAQ,CAAA,CAAA,GAAA;iBACN,SAAA,CAAU,IAAC,CAAA,WAAX,EAAyB,KAAK,CAAC,gBAA/B,EAAkD,IAAlD;QADM,CAAR;MAFgB;;MAMlB,OAAU,CAAA,CAAA;AACR,YAAA;QAAA,IAAG,IAAC,CAAA,IAAJ;iBACE,OAAO,CAAC,OAAR,CAAgB,IAAC,CAAA,IAAjB,EADF;SAAA,MAAA;UAGE,QAAA,GAAW,IAAC,CAAA,WAAD,GAAe,KAAK,CAAC;iBAChC,EAAE,CAAC,MAAH,CAAU,QAAV,CACE,CAAC,IADH,CACQ,CAAC,MAAD,CAAA,GAAA;YACJ,IAAG,MAAH;qBACE,IAAC,CAAA,aAAD,CAAA,EADF;aAAA,MAAA;qBAGE,IAAC,CAAA,YAAD,CAAA,EAHF;;UADI,CADR,EAJF;;MADQ;;IAzIZ;;;IAEE,KAAC,CAAA,YAAD,GAAgB;;IAChB,KAAC,CAAA,gBAAD,GAAoB;;;;;;EAmJhB;IAAN,MAAA,MAAA;MAEE,WAAc,OAAA,OAAA,CAAA;YAkCd,CAAA,aAAA,CAAA;QAlCe,IAAC,CAAA;QAAM,IAAC,CAAA;QACrB,IAAC,CAAA,KAAK,CAAC,MAAO,CAAA,IAAC,CAAA,IAAD,CAAd,GAAuB;MADX,CADd;;;MAKa,OAAZ,SAAY,CAAC,KAAD,EAAO,GAAP,CAAA;AACX,YAAA,CAAA,EAAA,CAAA,EAAA;AAAA;UACE,IAAA,GAAO,IAAC,CAAA,GAAI,CAAA,aAAA;UAEZ,CAAA,GAAI,IAAI,KAAJ,CAAU,KAAV,EAAgB,IAAhB;UAEJ,CAAC,CAAC,KAAF,GAAU,GAAI,CAAA,WAAA;UACd,CAAC,CAAC,IAAF,GAAS,KAAK,CAAC,KAAM,CAAA,CAAC,CAAC,KAAF;UACrB,CAAC,CAAC,GAAF,GAAQ,GAAI,CAAA,kBAAA;UACZ,CAAC,CAAC,IAAF,GAAS,GAAI,CAAA,0BAAA,CAAJ,IAAmC,GAAI,CAAA,mBAAA;UAChD,CAAC,CAAC,QAAF,GAAa,GAAI,CAAA,aAAA;UACjB,CAAC,CAAC,UAAF,GAAe,GAAI,CAAA,oBAAA;UACnB,CAAC,CAAC,OAAF,GAAY,GAAI,CAAA,gBAAA,EAXlB;SAAA,aAAA;UAaM;UACJ,OAAO,CAAC,GAAR,CAAY,CAAA,cAAA,CAAA,CAAiB,CAAjB,CAAA,CAAZ,EAdF;;eAeA,EAhBW;MAAA;;MAkBD,OAAX,QAAW,CAAC,KAAD,EAAO,SAAP,CAAA;AACV,YAAA;QAAA,CAAA,GAAI,IAAI,KAAJ,CAAU,KAAV,EAAkB,SAAS,CAAC,IAA5B,EAAJ;;QAEA,CAAA,GAAI,MAAM,CAAC,MAAP,CAAc,CAAd,EAAgB,SAAhB,EAFJ;;eAIA;MALU;;MAOA,OAAX,QAAW,CAAA,CAAA;AAEV,YAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAA;;AAAA;QAAA,KAAA,YAAA;;uBACE,IAAC,CAAA,KAAM,CAAA,GAAA,CAAP,GAAY;QADd,CAAA;;MAFU;;MAKZ,MAAS,CAAC,GAAD,CAAA;eAEP,CAAA;;UAAA,IAAA,EAAO,IAAC,CAAA,IAAR;UACA,KAAA,EAAQ,IAAC,CAAA,KADT;UAEA,IAAA,EAAO,IAAC,CAAA,IAFR;UAGA,GAAA,EAAM,IAAC,CAAA,GAHP;UAIA,IAAA,EAAO,IAAC,CAAA,IAJR;UAKA,QAAA,EAAW,IAAC,CAAA,QALZ;UAMA,UAAA,EAAa,IAAC,CAAA,UANd;UAOA,OAAA,EAAU,IAAC,CAAA;QAPX;MAFO;;IApCX;;IACE,KAAC,CAAA,KAAD,GAAS,CAAA;;;;gBA3TX;;;;;;;EA8WA,KAAK,CAAC,QAAN,CAAA;;EAEA,MAAM,CAAC,OAAP,GAAiB;AAhXjB",
  "sourcesContent": [
    "ADODB = require './adodb'    # require('node-adodb');\r\n{JsonCache,pathExists,writeFile} = require \"./utils\"\r\nfs = require 'fs-extra'\r\n\r\n#Provider=Microsoft.ACE.OLEDB.12.0;Data Source=E:\\ResMgr\\amdex\\resmanager;Jet OLEDB:Database Password=AERLINGUS\r\n\r\ntable_id = 0; # used to generate table ids\r\n\r\npromise = (fn) ->\r\n  new Promise (resolve,reject) ->\r\n    try\r\n      resolve fn()\r\n    catch e\r\n      reject e\r\n\r\n  # ADO constants\r\nadodb =\r\n  schemaEnum :\r\n    columns : 4\r\n    indexes : 12\r\n    procedures : 16\r\n    tables : 20\r\n    providerTypes : 22\r\n    views : 23\r\n    foreignKeys : 27\r\n    primaryKeys : 28\r\n    members : 38\r\n\r\n  typeEnum :\r\n    empty : 0\r\n    smallInt : 2\r\n    integer : 3     # default number/autonumber 10 places\r\n    single : 4\r\n    double : 5\r\n    currency : 6\r\n    date : 7\r\n    bstr : 8\r\n    idispatch : 9\r\n    error : 10\r\n    boolean : 11\r\n    variant : 12\r\n    iunknown : 13\r\n    decimal : 14\r\n    tinyInt : 15\r\n    unsignedTinyInt : 16\r\n    wchar : 130   # unicode string\r\n\r\n\r\nclass Db\r\n  constructor : (@name,@path,@password,@ext=\".mdb\") ->\r\n    @storagePath = \"storage/db/#{@name}/\"\r\n    pathExists @storagePath\r\n    @passString = \"\"\r\n    @passString = \"Jet OLEDB:Database Password=#{@password}\" if @password?\r\n    @file = @path + @ext\r\n    @provider = 'Provider=Microsoft.ACE.OLEDB.12.0'\r\n    @dataSource = \"Data Source=#{@file}\"\r\n    @connected = false;\r\n    # the cache should really be bound to a method or property/getter - later\r\n    @cacheTables = new JsonCache @storagePath, \"adodb-table-list\" , @adodbGetTables , @adodbTablesReceived\r\n    @cacheFields = new JsonCache @storagePath, \"tables\" , @adodbGetFields , @adodbFieldsReceived\r\n    @tables={}\r\n\r\n\r\n  connect : ->\r\n    cnnString = \"#{@provider};#{@dataSource};#{@passString}\"\r\n    @cnn = ADODB.open cnnString\r\n    @connected=true;\r\n\r\n  query : (sql) ->\r\n    @connect() if not @connected\r\n    data = @cnn.query(sql)\r\n    data\r\n\r\n  getTable : (name) ->\r\n    console.log \"table [#{name} not found in database.tables\" if not @tables[name]?\r\n    table = @tables[name]\r\n\r\n    # actually already have the data below!! but should really allow the cache to play with it before using it\r\n  adodbTablesReceived : (@tableList) =>  # @ in promise/cb\r\n    # this is not indexed!\r\n    #    @tables = @tableList.map (tableName) => # @ inside cb\r\n    #      new Table(@,tableName)\r\n    @tables = {}\r\n    for tablename in @tableList\r\n      table = new Table @,tablename\r\n      @tables[tablename]=table\r\n\r\n\r\n  adodbGetTables : (cb) =>\r\n    @connect() if not @connected\r\n    @cnn.schema 20\r\n      .then (@schema) =>  # fat for @ in promise\r\n        @tableList = @schema.map (adoRec) -> adoRec['TABLE_NAME']\r\n        # @adodbTablesReceived @tableList // cyclic will be called below - why specify separately???\r\n        # will be called after cache has been saved\r\n        cb @tableList    # cache.onRefresh + showAll!!\r\n      .catch (e) ->\r\n        console.log \"adodbGetTables Error : #{e} \"\r\n\r\n# kludge - should return a promise!! - instead using a callback!! needs to be bound\r\n  getTables : (cb) =>      #showAll     # fat - used as a static callback\r\n## use the cache\r\n    if @tables\r\n      cb @tables\r\n    else\r\n      @cacheTables.getData(cb)  #showAll\r\n\r\n  # should rewrite this using promises\r\n  getFields : () =>      #showAll     # fat - used as a static callback\r\n    # use the cache\r\n    if @fields\r\n      return Promise.resolve @fields\r\n    else\r\n      @cacheFields.getData()  #showAll\r\n\r\n  adodbFieldsReceived : (tables) =>  # @ in promise/cb - should really use the rawFieldlist here\r\n      console.log \"convert json data to table/field objects\"\r\n      # this called after the cache has been read AND after the data has been received from adodb\r\n      # process the json data\r\n      for k,v of tables   # its an object not array\r\n        Table.fromJson(@,v)\r\n\r\n  adodbGetFields : (cb) =>\r\n    @connect() if not @connected\r\n    @cnn.schema 4 # , [null,null,null]   # get ALL fields in db\r\n      .then (@schema) =>  # fat for @ in promise\r\n        tableList = @schema.map (ado)->\r\n          ado['TABLE_NAME']\r\n        @tableList = [...new Set(tableList)]  # unique tables as list\r\n        # construct the @tables\r\n        for ado in @schema\r\n          tableName = ado['TABLE_NAME']\r\n          # check if already exists\r\n          @tables={} if not @tables?\r\n          table = @addTable tableName if not @tables[tableName]?\r\n          table = @tables[tableName]\r\n          table.addField ado\r\n        cb @tables    # cache.onRefresh + showAll!!\r\n      .catch (e) ->\r\n        console.log \"adodbGetFields Error : #{e} \"\r\n\r\n# single query retuirns all fields, which give you all tables as well\r\n  xgetFields : (cb) ->\r\n    @connect() if not @connected\r\n    @cnn.schema 4 , [null,null,null]\r\n      .then (@schema) =>  # fat for @ in promise\r\n        for fieldObj in @schema\r\n          tableName = tableObj['TABLE_NAME']\r\n          # check if already exists\r\n          table = @addTable @ , tableName if not @tables[tableName]?\r\n          table = @tables[tableName]\r\n          table.addField fieldObj\r\n\r\n      .then ->\r\n        cb(); # TODO : cb kludge - should be promise\r\n      .catch (e) ->\r\n        console.log \"getFields Error : #{e} \"\r\n\r\n  addTable : (name) ->\r\n    table = new Table(@,name)\r\n#    @tables[name] = table\r\n    table\r\n\r\nclass Table\r\n  #statics\r\n  @filenameData : \"data.json\"\r\n  @filenameMetadata : \"metadata.json\"\r\n  constructor : (@db,@name) ->\r\n    @id = ++table_id if not @id\r\n    @primaryKey = \"\" if not @primaryKey\r\n    @fields={}\r\n    @db.tables[@name]=@\r\n    @count = 0\r\n    @storagePath = @db.storagePath + \"#{@name}/\"\r\n    pathExists @storagePath\r\n    fields=[] # temp holder ousteide scope\r\n    fs.exists @storagePath + Table.filenameMetadata , (exists) =>\r\n      if exists\r\n        @unpersistMetadata()\r\n# only needed if metadata changes\r\n#          .then =>\r\n#            fields = Object.values(@fields)\r\n#            fields.sort (a,b) ->\r\n#              a.ord - b.ord\r\n#          .then =>\r\n#            #convert array back to object\r\n#            @fields = {}  # reset\r\n#            for field in fields\r\n#              @fields[field.name]=field\r\n#          .then =>\r\n#            @persistMetadata()\r\n\r\n  meta : ->\r\n    #only needed if metadata changes\r\n    fields = Object.values(@fields)\r\n    fields.sort (a,b) ->\r\n      a.ord - b.ord\r\n    #convert array back to object\r\n    @fields = {}  # reset\r\n    for field in fields\r\n      @fields[field.name]=field\r\n    @persistMetadata()\r\n\r\n\r\n\r\n  # this is largely redundant\r\n  @fromJson : (db , tableJson) ->\r\n    console.log \"Dint forget to get rid of static Table.fromJson being used to load from fields file \"\r\n    table = db.addTable(tableJson.name)\r\n  #    table.count = tableJson.count if tableJson.count?\r\n    for k,fieldJson of tableJson.fields   # obj not array\r\n      Field.fromJson(table,fieldJson)\r\n\r\n  # restore this object\r\n  _fromJson : (json) ->\r\n    @id = json.id if json.id?\r\n    @name = json.name\r\n    @primaryKey = json.primaryKey if json.primaryKey?\r\n    @count = json.count\r\n    @fields = json.fields\r\n\r\n  toJSON : (key) => # fat @\r\n    if key?\r\n      id : @id\r\n      name : @name\r\n      primaryKey : @primaryKey\r\n      count : @count\r\n      fields : @fields\r\n    else\r\n      @\r\n\r\n\r\n  dump : ->\r\n    console.log \"Hello from table #{@name}\"\r\n\r\n  # lets try code this with a promise!! - adodb returns promise\r\n  adodbGetCount : ->\r\n    @db.query(\"SELECT count(*) as count FROM #{@name};\")\r\n      .then (data) =>\r\n      # adodb returns funny structure for expressions such as count\r\n        @count = data[0].Expr1000  # its an array with 1 value\r\n        console.log \"Record count #{@name} : #{@count}\"\r\n      .catch (err) =>\r\n        console.log \"Table.getCount()\",err\r\n\r\n  # reads data into cache\r\n  adodbGetData : ->\r\n    @db.query \"SELECT * FROM #{@name};\"\r\n      .then (@data) =>\r\n#        @data = []  # this will probably be a keyed object, once I've set the keys\r\n#        for k,row in data\r\n#          @data.push data\r\n      .then => # fat @\r\n        @count = @data.length\r\n        @persistMetadata()\r\n      .then =>  # fat @\r\n        @persistData()\r\n\r\n  adodbGetFields : ->\r\n    @db.cnn.schema 4 , [null,null,@name]\r\n      .then (@schema) =>  # fat for @ in promise\r\n        for column in @schema\r\n          @addField column\r\n      .catch (e) ->\r\n        console.log \"getFields Error : #{e}\"\r\n\r\n  addAdodbField : (ado) ->\r\n    field = Field.fromAdodb @,ado\r\n#    @fields[field.name]=field\r\n    field\r\n\r\n  unpersistMetadata : ->\r\n    filename = @storagePath + Table.filenameMetadata\r\n    fs.exists(filename)\r\n      .then (exists) =>\r\n        fs.readFile(filename)\r\n          .then (data) =>\r\n            json = JSON.parse(data)\r\n            @_fromJson json\r\n\r\n  unpersistData : ->\r\n    filename = @storagePath + Table.filenameData\r\n    fs.exists(filename)\r\n      .then (exists) =>\r\n        fs.readFile(filename)\r\n          .then (data) =>\r\n            @data = JSON.parse(data)\r\n\r\n  # saves the table meta data\r\n  persistData  : ->\r\n    data = JSON.stringify(@data,null,2)\r\n    writeFile @storagePath , Table.filenameData, data\r\n\r\n  # save meta\r\n  persistMetadata : ->\r\n    data = JSON.stringify(@,null,2)\r\n    promise =>\r\n      writeFile @storagePath , Table.filenameMetadata , data\r\n\r\n\r\n  getData : ->\r\n    if @data\r\n      Promise.resolve @data\r\n    else\r\n      filename = @storagePath + Table.filenameData\r\n      fs.exists(filename)\r\n        .then (exists) =>\r\n          if exists\r\n            @unpersistData()\r\n          else\r\n            @adodbGetData()\r\n\r\n\r\nclass Field\r\n  @types : {}\r\n  constructor : (@table,@name) ->\r\n    @table.fields[@name] = @\r\n\r\n  # static\r\n  @fromAdodb : (table,ado) ->\r\n    try\r\n      name = @ado['COLUMN_NAME']\r\n\r\n      f = new Field(table,name)\r\n\r\n      f.itype = ado['DATA_TYPE']\r\n      f.type = Field.types[f.itype]\r\n      f.ord = ado['ORDINAL_POSITION']\r\n      f.size = ado['CHARACTER_MAXIMUM_LENGTH'] || ado['NUMERIC_PRECISION']\r\n      f.nullable = ado['IS_NULLABLE']\r\n      f.hasDefault = ado['COLUMN_HAS_DEFAULT']\r\n      f.default = ado['COLUMN_DEFAULT']\r\n\r\n    catch e\r\n      console.log \"Field Error : #{e}\"\r\n    f # return\r\n\r\n  @fromJson : (table,fieldJson) ->\r\n    f = new Field table , fieldJson.name\r\n    # i don't think any special processing is required\r\n    f = Object.assign(f,fieldJson)\r\n#    table.fields[fieldJson.name] = f\r\n    f\r\n\r\n  @getTypes : ->\r\n    # invert the enums above\r\n    for value,key of adodb.typeEnum\r\n      @types[key]=value\r\n\r\n  toJSON : (key) =>\r\n    # need to remove backpointer table!!\r\n    name : @name\r\n    itype : @itype\r\n    type : @type\r\n    ord : @ord\r\n    size : @size\r\n    nullable : @nullable\r\n    hasDefault : @hasDefault\r\n    default : @default\r\n\r\n#    o={}\r\n#    for v,k of @\r\n#      o[k] = v if k not in [\"table\",\"ado\"]\r\n#    o\r\n# static call\r\nField.getTypes()\r\n\r\nmodule.exports = Db\r\n"
  ]
}