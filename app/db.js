// Generated by CoffeeScript 2.3.1
(function() {
  var ADODB, Db, Field, Table;

  ADODB = require('node-adodb');

  ({
    adodb: {
      schemaEnum: {
        columns: 4,
        indexes: 12,
        procedures: 16,
        tables: 20,
        providerTypes: 22,
        views: 23,
        foreignKeys: 27,
        primaryKeys: 28,
        members: 38
      },
      typeEnum: {
        empty: 0,
        smallInt: 2,
        integer: 3,
        single: 4,
        double: 5,
        currency: 6,
        date: 7,
        bstr: 8,
        idispatch: 9,
        error: 10,
        boolean: 11,
        variant: 12,
        iunknown: 13,
        decimal: 14,
        tinyInt: 15,
        unsignedTinyInt: 16
      }
    }
  });

  Db = class Db {
    constructor(name1, path, password, ext = ".mdb") {
      // kludge - should return a promise!! - instead using a callback!! needs to be bound
      this.getTables = this.getTables.bind(this);
      this.name = name1;
      this.path = path;
      this.password = password;
      this.ext = ext;
      this.passString = "";
      if (this.password != null) {
        this.passString = `Jet OLEDB:Database Password=${this.password}`;
      }
      this.file = this.path + this.ext;
      this.provider = 'Provider=Microsoft.ACE.OLEDB.12.0';
      this.tables = [];
      this.dataSource = `Data Source=${this.file}`;
      this.connected = false;
      this.cache = new JsonCache(`storage/db/${this.name}/`, "tables", this.getTables);
    }

    connect() {
      var cnnString;
      cnnString = `${this.provider};${this.dataSource};${this.passString}`;
      this.cnn = ADODB.open(cnnString);
      return this.connected = true;
    }

    getTable(name) {
      var table;
      if (this.tables[name] == null) {
        console.log(`table [${name} not found in database.tables`);
      }
      return table = this.tables[name];
    }

    getTables(cb) { // fat - used as a static callback
      if (!this.connected) {
        this.connect();
      }
      return this.cnn.schema(20).then((schema) => { // fat for @ in promise
        var i, len, ref, results, table, tableObj;
        this.schema = schema;
        ref = this.schema;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          tableObj = ref[i];
          results.push(table = this.addTable(tableObj['TABLE_NAME']));
        }
        return results;
      //          table.getFields()
      }).then(function() {
        return cb();
      }).catch(function(e) {
        return console.log(`getTables Error : ${e} `);
      });
    }

    // single query retuirns all fields, which give you all tables as well
    getFields(cb) {
      if (!this.connected) {
        this.connect();
      }
      return this.db.cnn.schema(4, [null, null, null]).then((schema) => { // fat for @ in promise
        var fieldObj, i, len, ref, results, table, tableName;
        this.schema = schema;
        ref = this.schema;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          fieldObj = ref[i];
          tableName = tableObj['TABLE_NAME'];
          if (this.tables[tableName] == null) {
            // check if already exists
            table = this.addTable(this, tableName);
          }
          table = this.tables[tableName];
          results.push(table.addField(fieldObj));
        }
        return results;
      }).then(function() {
        return cb();
      }).catch(function(e) {
        return console.log(`getFields Error : ${e} `);
      });
    }

    addTable(name) {
      var table;
      table = new Table(this, name);
      this.tables[name] = table;
      return table;
    }

  };

  Table = class Table {
    constructor(db, name1) {
      this.db = db;
      this.name = name1;
      this.fields = [];
    }

    dump() {
      return console.log(`Hello from table ${this.name}`);
    }

    getFields() {
      return this.db.cnn.schema(4, [null, null, this.name]).then((schema) => { // fat for @ in promise
        var column, i, len, ref, results;
        this.schema = schema;
        ref = this.schema;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          column = ref[i];
          results.push(this.addField(column));
        }
        return results;
      }).catch(function(e) {
        return console.log(`getFields Error : ${e}`);
      });
    }

    addField(column) {
      var field;
      field = new Field(this, column);
      this.fields[field.name] = field;
      return field;
    }

  };

  Field = class Field {
    constructor(table1, column1) {
      var e;
      this.table = table1;
      this.column = column1;
      try {
        this.name = this.column['COLUMN_NAME'];
        this.itype = this.column['DATA_TYPE'];
      } catch (error) {
        e = error;
        console.log(`Field Error : ${e}`);
      }
    }

  };

  module.exports = Db;

}).call(this);

//# sourceMappingURL=db.js.map
